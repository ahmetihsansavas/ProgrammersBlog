@using ProgrammersBlog.Shared.Utilities.Results.ComplexTypes
@model ProgrammersBlog.Entities.Dtos.UserListDto
@{
    Layout = "_Layout";
    ViewBag.Title = "Kullanıcılar Index";
}
@if (Model.ResultStatus == ResultStatus.Success)
{
    <div id="modalPlaceHolder" aria-hidden="true"></div>
    <div class="card mb-4 mt-2">
        <div class="card-header">
            <i class="fas fa-table mr-1"></i>
            Kullanıcılar
        </div>
        <div class="card-body">
            <div class="spinner-border" role="status" style="display:none;">
                <span class="sr-only">Yükleniyor...</span>
            </div>
            <div class="table-responsive">
                <table class="table table-bordered" id="usersTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Kullanıcı Adı</th>
                            <th>E-Posta Adresi</th>
                            <th>Telefon Numarası</th>
                            <th>Resim</th>
                            <th>İşlemler</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>ID</th>
                            <th>Kullanıcı Adı</th>
                            <th>E-Posta Adresi</th>
                            <th>Telefon Numarası</th>
                            <th>Resim</th>
                            <th>İşlemler</th>
                        </tr>
                    </tfoot>
                    <tbody>
                        @foreach (var user in Model.Users)
                        {
                            <tr name="@user.Id">
                                <td>@user.Id</td>
                                <td>@user.UserName</td>
                                <td>@user.Email</td>
                                <td>@user.PhoneNumber</td>
                                <td><img src="~/img/@user.Picture" alt="@user.UserName" class="my-image-table" /> </td>
                                <td>
                                    <button class="btn btn-primary btn-sm btn-update" data-id="@user.Id"><span class="fas fa-edit"></span></button>
                                    <button class="btn btn-danger btn-sm btn-delete" data-id="@user.Id"><span class="fas fa-minus-circle"></span></button>
                                </td>
                            </tr>

                        }

                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
@if (Model.ResultStatus == ResultStatus.Error) 
{
    <div class="alert alert-danger mt-3">
        @Model.Message <br/>
        Dashboard Sayfasına Geri dönmek için <a class="alert-link" asp-area="Admin" asp-controller="Home" asp-action="Index">tıklayınız. </a> 
    </div>


}

    @section Scripts
{
        <script>
              $(document).ready(function () {
                  const dataTable = $('#usersTable').DataTable({
                    dom:
                        "<'row'<'col-sm-3'l><'col-sm-6 text-center'B><'col-sm-3'f>>" +
                        "<'row'<'col-sm-12'tr>>" +
                        "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                    buttons: [
                        {
                            text: 'Ekle',
                            attr: {
                                id:"btnAdd",
                            },
                            className: 'btn btn-success',
                            action: function (e, dt, node, config) {

                            }
                        },
                        {
                            text: 'Yenile',
                            className: 'btn btn-warning',
                            action: function (e, dt, node, config) {
                                $.ajax({ //butonumuz içeris. calıs. olan jquery metodunu yazıy.
                                    type: 'GET', //yap. get post put vb gibi islemi seciyoruz.
                                    url: '@Url.Action("GetAllUsers","User")', //verileri nered. alıcag. url yi ayarl.
                                    contentType: "application/json", //gelic. olan veri tipini belrit. xml de olab.
                                    beforeSend: function () { //get isle. yap. hemen önce calıs. olan fonk. tanımla.
                                        $('#usersTable').hide();
                                        $('.spinner-border').show();
                                    },
                                    success: function (data) { //get islemi bas. old. sonra ki calıs. kısım.
                                        const userListDto = jQuery.parseJSON(data); //Cont. icers. yazm. old. metotdan gelen veriyi ald. sonra parse edi.
                                        dataTable.clear();
                                        console.log("gelen data userlist")
                                        console.log(userListDto);
                                        if (userListDto.ResultStatus === 0) {//veriler bas. sek. gelmis demektir.
                                          
                                            $.each(userListDto.Users.$values, function (index, user) { //gelen verileri Json içeris. seciyoruz ve foreach ile dön.
                                            const newTableRow = dataTable.row.add([
                                                        user.Id,
                                                        user.UserName,
                                                        user.Email,
                                                        user.PhoneNumber,
                                                    ` <img src="/img/${user.Picture}" alt="${user.UserName}" style="max-height:50px; max-width:50px;" />`,
                                                    ` 
                                    <button class="btn btn-primary btn-sm  btn-update" data-id="${user.Id}"><span class="fas fa-edit"></span></button>
                                    <button class="btn btn-danger btn-sm  btn-delete" data-id="${user.Id}"><span class="fas fa-minus-circle"></span></button>
                                                    `
                                            ]).node();
                                                const jqueryTableRow = $(newTableRow);
                                                jqueryTableRow.attr('name', `${user.Id}`);
                                            });
                                            dataTable.draw();
                                            $('.spinner-border').hide(); //yükleniyor spinner ı kapatıyoruz.
                                            $('#usersTable').fadeIn(1800); // tablomuz efektli bir sek. ekrana gel.
                                        }
                                        else {
                                            toastr.error(`${userListDto.Message}`, 'Islem basarısız!');
                                            alert(`${userListDto.Message}`);
                                        }
                                    },
                                    error: function (err) { //get isle. hatalı old. sonra calıs. kısım
                                        console.log(err);
                                        $('.spinner-border').hide(); //yükleniyor spinner ı kapatıyoruz.
                                        $('#usersTable').fadeIn(1800); // tablomuz efektli bir sek. ekrana gel.
                                        toastr.error(`${err}`, 'Islem basarısız!');
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Bir hata olustu.',
                                            text: `${err}`,
                                            footer: '<a href="">Why do I have this issue?</a>'
                                        });
                                    }
                                });
                            }
                        }
                    ],
                    language: {
                        "emptyTable": "Tabloda herhangi bir veri mevcut değil",
                        "info": "_TOTAL_ kayıttan _START_ - _END_ arasındaki kayıtlar gösteriliyor",
                        "infoEmpty": "Kayıt yok",
                        "infoFiltered": "(_MAX_ kayıt içerisinden bulunan)",
                        "infoThousands": ".",
                        "lengthMenu": "Sayfada _MENU_ kayıt göster",
                        "loadingRecords": "Yükleniyor...",
                        "processing": "İşleniyor...",
                        "search": "Ara:",
                        "zeroRecords": "Eşleşen kayıt bulunamadı",
                        "paginate": {
                            "first": "İlk",
                            "last": "Son",
                            "next": "Sonraki",
                            "previous": "Önceki"
                        },
                        "aria": {
                            "sortAscending": ": artan sütun sıralamasını aktifleştir",
                            "sortDescending": ": azalan sütun sıralamasını aktifleştir"
                        },
                        "select": {
                            "rows": {
                                "_": "%d kayıt seçildi",
                                "1": "1 kayıt seçildi",
                                "0": "-"
                            },
                            "0": "-",
                            "1": "%d satır seçildi",
                            "2": "-",
                            "_": "%d satır seçildi",
                            "cells": {
                                "1": "1 hücre seçildi",
                                "_": "%d hücre seçildi"
                            },
                            "columns": {
                                "1": "1 sütun seçildi",
                                "_": "%d sütun seçildi"
                            }
                        },
                        "autoFill": {
                            "cancel": "İptal",
                            "fillHorizontal": "Hücreleri yatay olarak doldur",
                            "fillVertical": "Hücreleri dikey olarak doldur",
                            "info": "-",
                            "fill": "Bütün hücreleri <i>%d<\/i> ile doldur"
                        },
                        "buttons": {
                            "collection": "Koleksiyon <span class=\"ui-button-icon-primary ui-icon ui-icon-triangle-1-s\"><\/span>",
                            "colvis": "Sütun görünürlüğü",
                            "colvisRestore": "Görünürlüğü eski haline getir",
                            "copySuccess": {
                                "1": "1 satır panoya kopyalandı",
                                "_": "%ds satır panoya kopyalandı"
                            },
                            "copyTitle": "Panoya kopyala",
                            "csv": "CSV",
                            "excel": "Excel",
                            "pageLength": {
                                "-1": "Bütün satırları göster",
                                "1": "-",
                                "_": "%d satır göster"
                            },
                            "pdf": "PDF",
                            "print": "Yazdır",
                            "copy": "Kopyala",
                            "copyKeys": "Tablodaki veriyi kopyalamak için CTRL veya u2318 + C tuşlarına basınız. İptal etmek için bu mesaja tıklayın veya escape tuşuna basın."
                        },
                        "infoPostFix": "-",
                        "searchBuilder": {
                            "add": "Koşul Ekle",
                            "button": {
                                "0": "Arama Oluşturucu",
                                "_": "Arama Oluşturucu (%dUrl"
                            },
                            "condition": "Koşul",
                            "conditions": {
                                "date": {
                                    "after": "Sonra",
                                    "before": "Önce",
                                    "between": "Arasında",
                                    "empty": "Boş",
                                    "equals": "Eşittir",
                                    "not": "Değildir",
                                    "notBetween": "Dışında",
                                    "notEmpty": "Dolu"
                                },
                                "number": {
                                    "between": "Arasında",
                                    "empty": "Boş",
                                    "equals": "Eşittir",
                                    "gt": "Büyüktür",
                                    "gte": "Büyük eşittir",
                                    "lt": "Küçüktür",
                                    "lte": "Küçük eşittir",
                                    "not": "Değildir",
                                    "notBetween": "Dışında",
                                    "notEmpty": "Dolu"
                                },
                                "string": {
                                    "contains": "İçerir",
                                    "empty": "Boş",
                                    "endsWith": "İle biter",
                                    "equals": "Eşittir",
                                    "not": "Değildir",
                                    "notEmpty": "Dolu",
                                    "startsWith": "İle başlar"
                                },
                                "array": {
                                    "contains": "İçerir",
                                    "empty": "Boş",
                                    "equals": "Eşittir",
                                    "not": "Değildir",
                                    "notEmpty": "Dolu",
                                    "without": "Hariç"
                                }
                            },
                            "data": "Veri",
                            "deleteTitle": "Filtreleme kuralını silin",
                            "leftTitle": "Kriteri dışarı çıkart",
                            "logicAnd": "ve",
                            "logicOr": "veya",
                            "rightTitle": "Kriteri içeri al",
                            "title": {
                                "0": "Arama Oluşturucu",
                                "_": "Arama Oluşturucu (%d)"
                            },
                            "value": "Değer",
                            "clearAll": "Filtreleri Temizle"
                        },
                        "searchPanes": {
                            "clearMessage": "Hepsini Temizle",
                            "collapse": {
                                "0": "Arama Bölmesi",
                                "_": "Arama Bölmesi (%d)"
                            },
                            "count": "{total}",
                            "countFiltered": "{shown}\/{total}",
                            "emptyPanes": "Arama Bölmesi yok",
                            "loadMessage": "Arama Bölmeleri yükleniyor ...",
                            "title": "Etkin filtreler - %d"
                        },
                        "searchPlaceholder": "Ara",
                        "thousands": ".",
                        "datetime": {
                            "amPm": [
                                "öö",
                                "ös"
                            ],
                            "hours": "Saat",
                            "minutes": "Dakika",
                            "next": "Sonraki",
                            "previous": "Önceki",
                            "seconds": "Saniye",
                            "unknown": "Bilinmeyen"
                        },
                        "decimal": ",",
                        "editor": {
                            "close": "Kapat",
                            "create": {
                                "button": "Yeni",
                                "submit": "Kaydet",
                                "title": "Yeni kayıt oluştur"
                            },
                            "edit": {
                                "button": "Düzenle",
                                "submit": "Güncelle",
                                "title": "Kaydı düzenle"
                            },
                            "error": {
                                "system": "Bir sistem hatası oluştu (Ayrıntılı bilgi)"
                            },
                            "multi": {
                                "info": "Seçili kayıtlar bu alanda farklı değerler içeriyor. Seçili kayıtların hepsinde bu alana aynı değeri atamak için buraya tıklayın; aksi halde her kayıt bu alanda kendi değerini koruyacak.",
                                "noMulti": "Bu alan bir grup olarak değil ancak tekil olarak düzenlenebilir.",
                                "restore": "Değişiklikleri geri al",
                                "title": "Çoklu değer"
                            },
                            "remove": {
                                "button": "Sil",
                                "confirm": {
                                    "_": "%d adet kaydı silmek istediğinize emin misiniz?",
                                    "1": "Bu kaydı silmek istediğinizden emin misiniz?"
                                },
                                "submit": "Sil",
                                "title": "Kayıtları sil"
                            }
                        }
                    }

                });
                @* DataTables ends here*@
                @* Ajax GET / Getting the _UserAddPartial as Modal Form starts from here. *@
                $(function () {
                    const url = '@Url.Action("Add","User")';
                    const placeHolderDiv = $('#modalPlaceHolder');
                    $("#btnAdd").click(function () {
                        $.get(url).done(function (data) {
                            placeHolderDiv.html(data);
                            placeHolderDiv.find(".modal").modal('show');

                        });

                    });
                @* Ajax GET / Getting the _UserAddPartial as Modal Form ends  here. *@
                    @* Ajax POST / Posting the FormData as UserAddDto  starts from here. *@
                    placeHolderDiv.on('click', '#btnSave', function (event) {
                        event.preventDefault(); //.net taraf. butonun submit yapıp sayf. yenilememesi icin butonun tıklanmasını engell.
                        const form = $('#form-user-add'); // _UserAddPartial da ki formu seciyoruz.
                        const actionUrl = form.attr('action'); // Formun içeris. bulunan action ı seciyoruz..
                        const dataToSend = new FormData(form.get(0)); //Gönd. olan datayı formu  seciyoruz..
                        $.ajax({
                            url: actionUrl,
                            type: "POST",
                            data: dataToSend,
                            processData: false,
                            contentType:false,
                            success: function (data) {
                                console.log( data);
                                const userAddAjaxModel = jQuery.parseJSON(data);//bizlere(Controllerdan) return isleminden gelen data yı parse etmek istiyoruz
                                console.log(userAddAjaxModel);
                                const newFormBody = $('.modal-body', userAddAjaxModel.UserAddPartial); //Form da gönd olan verilerin  veya hatalı yelerin kullanıcıya göst. icin
                                placeHolderDiv.find('.modal-body').replaceWith(newFormBody);//eski formu yenisi ile degist.
                                const isValid = newFormBody.find('[name="IsValid"]').val() === 'True'; //formumuzdaki kont icin yazd. IsValid in degerini alıyoruz.
                                console.log(isValid);
                                if (isValid) {
                                    placeHolderDiv.find('.modal').modal('hide');
                                    const newTableRow = dataTable.row.add([
                                        userAddAjaxModel.UserDto.User.Id,
                                        userAddAjaxModel.UserDto.User.UserName,
                                        userAddAjaxModel.UserDto.User.Email,
                                        userAddAjaxModel.UserDto.User.PhoneNumber,
                                       ` <img src="/img/${userAddAjaxModel.UserDto.User.Picture}" alt="${userAddAjaxModel.UserDto.User.UserName}" style="max-height:50px; max-width:50px;" />`,
                                       ` 
                                    <button class="btn btn-primary btn-sm  btn-update" data-id="${userAddAjaxModel.UserDto.User.Id}"><span class="fas fa-edit"></span></button>
                                    <button class="btn btn-danger btn-sm  btn-delete" data-id="${userAddAjaxModel.UserDto.User.Id}"><span class="fas fa-minus-circle"></span></button>
                                       ` 
                                    ]).node();
                                    const jqueryTableRow = $(newTableRow);
                                    jqueryTableRow.attr('name', `${userAddAjaxModel.UserDto.User.Id}`);;
                                    dataTable.row(newTableRow).draw();
                                    toastr.success(`${userAddAjaxModel.UserDto.Message}`, 'Başarılı İşlem!');
                                    Swal.fire({
                                        position: 'top-end',
                                        icon: 'success',
                                        title: 'Başarılı işlem',
                                        text: `${userAddAjaxModel.UserDto.Message}`,
                                        showConfirmButton: false,
                                        timer: 3500
                                    });


                                }
                                else {
                                    //eğer kayd. veride herhan. bir hata varsa validation summary ksımında en yukarıda göreceğiz..
                                    let summaryText = "";
                                    $('#validation-summary > ul > li').each(function () {
                                        let text = $(this).text();
                                        summaryText = `*${text}\n`;
                                    });
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Bir hata olustu.',
                                        text: summaryText,
                                        footer: '<a href="">Why do I have this issue?</a>'
                                    });
                                    toastr.warning(summaryText);
                                }
                            },
                            error: function (err) {
                                console.log(err);
                            }


                    });
                    });

                });
                @* Ajax POST / Getting the FormData as UserAddDto ends here *@
                @* Ajax POST / Deleting a User starts here *@
                $(document).on('click', '.btn-delete', function (event) {
                    event.preventDefault();
                    const id = $(this).attr("data-id"); // silme butonuna bas. user id değer. almak icin..
                    const tableRow = $(`[name="${id}"]`); //silinen user satırını seciyoruz..
                    const userName = tableRow.find('td:eq(1)').text(); // ikinci sıradaki td user. name ini verd. için
                    console.log(tableRow);
                    Swal.fire({ //projemize ekled. sweetalert kütüph. kodları
                        title: 'Silmek istediğinize emin misiniz?',
                        text: `${userName} adlı kategori silinicektir!`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Evet,silmek istiyorum!!',
                        cancelButtonText:'Hayır,silmek istemiyorum.'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.ajax({
                                type: 'POST',
                                dataType: 'json',
                                data: { userId: id },
                                url: '@Url.Action("Delete","User")', // /Admin/User/Delete/
                                success: function (data) {
                                    const userDto = jQuery.parseJSON(data);
                                    if (userDto.ResultStatus === 0) { //silme isl. basa. old. zaman
                                        Swal.fire( //sweetalert kütüp. basarılı islemde cıkacak olan alert
                                            'Silindi!',
                                            `${userDto.User.UserName} adlı kullanıcı başarıyla silinmiştir.`,
                                            'success'
                                        );

                                        dataTable.row(tableRow).remove().draw(); //efektli olarak ekrandan git.
                                    }
                                    else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Bir hata olustu.',
                                            text: `${userDto.Message}`,
                                            footer: '<a href="">Why do I have this issue?</a>'
                                        });
                                    }
                                },
                                error: function (err) {
                                    console.log(err);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Bir hata olustu.',
                                        text: err,
                                        footer: '<a href="">Why do I have this issue?</a>'
                                    });
                                }


                            });
                        }
                    })
                });


                $(function () {
                    const url = '/Admin/User/Update/';
                    const placeHolderDiv = $('#modalPlaceHolder');
                    $(document).on('click', '.btn-update', function (event) {
                        event.preventDefault();
                        const id = $(this).attr('data-id');
                        $.get(url, { userId: id }).done(function (data) {
                            placeHolderDiv.html(data);
                            console.log(data);
                            placeHolderDiv.find('.modal').modal('show');
                        }).fail(function () {
                            Swal.fire({
                                icon: 'error',
                                title: 'Bir hata olustu.',
                                text: "hata olustu",
                                footer: '<a href="">Why do I have this issue?</a>'
                            });
                        });
                    });

                    @* Ajax POST / Updating User starts from here *@
                    placeHolderDiv.on('click', '#btnUpdate', function (event) {
                        event.preventDefault();
                        const form = $('#form-user-update');
                        const actionUrl = form.attr('action');
                        const dataToSend = new FormData(form.get(0)); //Gönd. olan datayı formu  seciyoruz..
                        $.ajax({
                            url: actionUrl,
                            type: "POST",
                            data: dataToSend,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                const userUpdateAjaxModel = jQuery.parseJSON(data);
                                console.log(userUpdateAjaxModel);
                                const id = userUpdateAjaxModel.UserDto.User.Id; //degis. olan user id 
                                const tableRow = $(`[name="${id}"]`); // degis. olan user ın satırı
                                const newFormBody = $('.modal-body', userUpdateAjaxModel.UserUpdatePartial);
                                placeHolderDiv.find('.modal-body').replaceWith(newFormBody);
                                const isValid = newFormBody.find('[name="IsValid"]').val() === 'True';
                                if (isValid) {
                                    placeHolderDiv.find('.modal').modal('hide');
                                    dataTable.row(tableRow).data([
                                        userUpdateAjaxModel.UserDto.User.Id,
                                        userUpdateAjaxModel.UserDto.User.UserName,
                                        userUpdateAjaxModel.UserDto.User.Email,
                                        userUpdateAjaxModel.UserDto.User.PhoneNumber,
                                        ` <img src="/img/${userUpdateAjaxModel.UserDto.User.Picture}" alt="${userUpdateAjaxModel.UserDto.User.UserName}" class="my-image-table" />`,
                                        ` 
                                    <button class="btn btn-primary btn-sm  btn-update" data-id="${userUpdateAjaxModel.UserDto.User.Id}"><span class="fas fa-edit"></span></button>
                                    <button class="btn btn-danger btn-sm  btn-delete" data-id="${userUpdateAjaxModel.UserDto.User.Id}"><span class="fas fa-minus-circle"></span></button>
                                       `
                                    ]);
                                    tableRow.attr("name", `${id}`);
                                    dataTable.row(tableRow).invalidate(); // degis. dataTable ı degis.
                                    Swal.fire({
                                        position: 'top-end',
                                        icon: 'success',
                                        title: 'Başarılı işlem',
                                        text: `${userUpdateAjaxModel.UserDto.Message}`,
                                        showConfirmButton: false,
                                        timer: 3700
                                    });

                                } else {
                                    let summaryText = "";
                                    $('#validation-summary > ul > li ').each(function () {
                                        let text = $(this).text();
                                        summaryText = `*${text}\n`;
                                    });
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Bir hata olustu.',
                                        text: summaryText,
                                        footer: '<a href="">Why do I have this issue?</a>'
                                    });
                                }
                            },
                            error: function (err) {
                                console.log(err);
                            }
                            });
                    });

                });


            });
        </script>

    }